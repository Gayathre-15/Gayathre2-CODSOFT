# Function to check if there's a winner or the game is tied
def check_winner(board):
    # Check rows, columns, and diagonals
    for row in board:
        if row[0] == row[1] == row[2] and row[0] != "-":
            return row[0]

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != "-":
            return board[0][col]

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != "-":
        return board[0][0]

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != "-":
        return board[0][2]

    return None

# Minimax algorithm with Alpha-Beta pruning
def minimax(board, is_maximizing, alpha, beta):
    winner = check_winner(board)
    if winner == "X":
        return 1  # AI wins
    elif winner == "O":
        return -1  # Human wins
    elif "-" not in [cell for row in board for cell in row]:
        return 0  # Tie

    if is_maximizing:
        best_score = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == "-":
                    board[i][j] = "X"  # AI move
                    score = minimax(board, False, alpha, beta)
                    board[i][j] = "-"
                    best_score = max(score, best_score)
                    alpha = max(alpha, score)
                    if beta <= alpha:
                        break
        return best_score
    else:
        best_score = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == "-":
                    board[i][j] = "O"  # Human move
                    score = minimax(board, True, alpha, beta)
                    board[i][j] = "-"
                    best_score = min(score, best_score)
                    beta = min(beta, score)
                    if beta <= alpha:
                        break
        return best_score

# AI's function to choose the best move
def best_move(board):
    best_score = float('-inf')
    move = None

    for i in range(3):
        for j in range(3):
            if board[i][j] == "-":
                board[i][j] = "X"  # AI move
                score = minimax(board, False, float('-inf'), float('inf'))
                board[i][j] = "-"
                if score > best_score:
                    best_score = score
                    move = (i, j)

    return move

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print("|".join(row))
    print()

# Main function to run the game loop
def play_game():
    board = [["-", "-", "-"] for _ in range(3)]
    player_turn = True  # Human starts

    while check_winner(board) is None and "-" in [cell for row in board for cell in row]:
        print_board(board)

        if player_turn:
            # Human move
            try:
                row = int(input("Enter row (0-2): "))
                col = int(input("Enter col (0-2): "))
                if board[row][col] == "-":
                    board[row][col] = "O"
                    player_turn = False
                else:
                    print("Invalid move! Cell already taken.")
            except (IndexError, ValueError):
                print("Invalid input! Please enter numbers between 0 and 2.")
        else:
            # AI move
            move = best_move(board)
            board[move[0]][move[1]] = "X"
            player_turn = True

    print_board(board)
    winner = check_winner(board)
    if winner:
        print(f"{winner} wins!")
    else:
        print("It's a tie!")

# Run the game
play_game()
